/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gramatica;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author dkram
 */
public class NewJFrame extends javax.swing.JFrame {
/*
guardando aqui exemplos pra testar
    
S -> a|aB|b
A -> aS|aB
B -> b|bA       

A -> A|aB
B -> b|bB
*/
    
    
    private ArrayList ladoEsquerdoProducao = new ArrayList<>();
    private ArrayList ladoDireitoProducao = new ArrayList<>();    
    private ArrayList<Produtor> listaProdutores = new ArrayList<>();
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Nterminais = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Executar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        aDef = new javax.swing.JLabel();
        terminais = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        producao = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Nterminais.setText("A,B");
        Nterminais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NterminaisActionPerformed(evt);
            }
        });

        jLabel1.setText("Entre com a gramática abaixo:");

        jLabel3.setText("Não terminais:");

        jLabel4.setText("Terminais:");

        jLabel5.setText("Produção:");

        Executar.setText("Executar");
        Executar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecutarActionPerformed(evt);
            }
        });

        jLabel2.setText("Gramática a ser definida:");

        aDef.setText("A definir...");

        terminais.setText("a,b");

        producao.setColumns(20);
        producao.setRows(5);
        producao.setText("A -> a|aB\nB -> b|bB");
        jScrollPane1.setViewportView(producao);

        jLabel6.setText("obs: Sentença vazia: *");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aDef))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addGap(59, 59, 59))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(terminais, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Nterminais, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 306, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(Executar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Nterminais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(terminais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Executar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(aDef))
                .addContainerGap(201, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NterminaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NterminaisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NterminaisActionPerformed

    private void ExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecutarActionPerformed
        String gramatica = "G = ({"+ pegarNterminais() + "}, {" + pegarTerminais() + "}, P, S)";
        aDef.setText(gramatica);
        
        String producaoSep[]=producao.getText().split("\n");
        
        int posicaoSeparador=0;
        //para acessar cada uma das linhas da producao: producaoSep[n], sendo n a linha desejada.
        for (String linha:producaoSep){
            System.out.println(linha);
            posicaoSeparador = linha.indexOf("->");
            ladoEsquerdoProducao.add(linha.substring(0, posicaoSeparador).trim());
            ladoDireitoProducao.add(linha.substring(posicaoSeparador+2, linha.length()).trim());
            

        } 
        System.out.println("ladoEsq="+ladoEsquerdoProducao);
        System.out.println("ladoDir="+ladoDireitoProducao);        
        
        populaListaDeProdutores();
        
        System.out.println("-----EXIBINDO OS PRODUTORES E SUAS GERAÇÕES-----");
                
        for (Produtor prod : listaProdutores) {
            System.out.println("Letras="+prod.getLetras());
            for (int i = 0; i < prod.getGeradores().size(); i++) {
                System.out.println("    Geradores="+prod.getGeradores().get(i));
            }
        }
        System.out.println("------------------------------------------------");

        if (validaGramatica() == false) {
            JOptionPane.showConfirmDialog(null, "A Gramática é inválida.");
            System.exit(0);
        }
        
        String teste = tipoGramatica();
        
        derivaGramatica();
        
        
    }//GEN-LAST:event_ExecutarActionPerformed

    public boolean validaGramatica(){
        //questão 3 do trabalho pede para validar a gramática..
        //criar alguma validação importante aqui
        
        return true;
    }
    
    public void populaListaDeProdutores(){
        for (int i = 0; i < ladoEsquerdoProducao.size(); i++) {
            //cria produtor e coloca as Letras nele (Letras = lado esquerdo)
            Produtor produtor = new Produtor();
            produtor.setLetras(ladoEsquerdoProducao.get(i).toString());
            
            //separa os geradores do lado esquerdo           
            String[] ladoDireitoSeparado = ladoDireitoProducao.get(i).toString().split("\\|");
            
            //insere na lista do produtor
            for (int j = 0; j < ladoDireitoSeparado.length; j++) {
                produtor.getGeradores().add(ladoDireitoSeparado[j]);                
            }
            
            listaProdutores.add(produtor);
        }       
    }
    
    public String derivaGramatica(){
        int nivelJaDerivado = 0; //contador para derivar certa quantidade de vezes só
        
        boolean derivar = true;
        Random r = new Random();
        Produtor produtorAtual = new Produtor();
        String geradorAtual= listaProdutores.get(0).getLetras() + " -> "; //gerador do lado direito
        String g = "";
        String terminal = "";
        String naoTerminal = "";

        produtorAtual = listaProdutores.get(0);
        //System.out.println(produtorAtual.getLetras());
        
        while(derivar){
            
            int x = r.nextInt(produtorAtual.getGeradores().size()); //escolhe indice aleatorio
            g = produtorAtual.getGeradores().get(x).toString(); //pega o gerador aleatorio e guarda
            System.out.println(g);
            
            //ATENÇÃO: Se na gramatica tiver um NT+T (ex: Bb), entao deve-se criar mais um 'if' verificando se
            //o NT está no começo ou no fim e adicionar -> geradorAtual = geradorAtual.concat(g + terminal + " -> ")
            //Se o NT estiver no meio (aBb), eu não sei kkkkkkk
            if(terminal.isEmpty()){
                geradorAtual = geradorAtual.concat(g + " -> ");
            }else{
                geradorAtual = geradorAtual.concat(terminal + g + " -> ");
            }
            
            //se o gerador aleatorio for minusculo, a derivação termina
            //se contiver maiuscula, percorre a string e retorna a letra maiucula
            if(g.toLowerCase().equals(g)){             
                System.out.println("derivação terminada: " + geradorAtual.toString()); //precisar concatenar os resultados
                derivar = false;
            }else{
                for(int y = 0; y < g.length(); y++){
                    if(Character.isUpperCase(g.charAt(y))){
                       char w = g.charAt(y);
                       naoTerminal = Character.toString(w);
                    }
                    if(Character.isLowerCase(g.charAt(y))){
                       char w = g.charAt(y);
                       terminal = terminal.concat(Character.toString(w));
                    }
                    //System.out.println(isUp);
                    produtorAtual = listaProdutores.get(indiceNT(naoTerminal));
                }
            }
                    
        }
        
        return "";
    }
    
    public int indiceNT(String isUp){
        int i = 0;
        for (i = 0; i < listaProdutores.size()-1; i++) {
            if(isUp.equals(listaProdutores.get(i).getLetras())){
                return i;
            }
        }
        return i;
    }
    
    public String tipoGramatica(){
        int gr = 0;
        int glc = 0;
        int gsc = 0;
        int gi = 0;
        
        //o primeiro for verifica se é gramática do tipo 3 ou do tipo 2
        for(int i = 0; i < listaProdutores.size(); i++){ 
            if (listaProdutores.get(i).getLetras().length() != 1) { 
                break;
            }else{
                for(int j = 0; j < listaProdutores.get(i).getGeradores().size(); j++){
                    int tam = listaProdutores.get(i).getGeradores().get(j).toString().length();
                    if (tam <= 2) { //verificar se é gramatica regular
                        if(tam == 1 && Character.isLowerCase(listaProdutores.get(i).getGeradores().get(j).toString().charAt(0))){
                            gr++;
                        }else{
                            if(Character.isLowerCase(listaProdutores.get(i).getGeradores().get(j).toString().charAt(0)) && 
                                Character.isUpperCase(listaProdutores.get(i).getGeradores().get(j).toString().charAt(1))){
                                gr++;
                            }else{//se nenhuma condição para ser gr é satisfeita, então é glc
                                glc++;
                            }
                        }

                    }else{ //verificar se é livre de contexto (implementar identificação de simbolo vazio)
                        
                    }
                }
            }
        }
        
        /*fazer identificação da gramática do tipo 1
        --------------------------
        */
        
        
        /*--------------------
        Tornar mais coeso os identificadores de gramática abaixo        */      
        if(glc > 0){
            System.out.println("gramática livre de contexto");
        }else{
            System.out.println("gramática regular");
        }
        //System.out.println(Math.max(gr, glc));
        return "";
    }
    
    public String pegarNterminais(){
        if(Nterminais.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Informe os não terminais! Ex: S,A,B");
            return null;
        }
        return Nterminais.getText().toUpperCase();
    }

    public String pegarTerminais(){
        if(terminais.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Informe os  terminais! Ex: a,b");
            return null;
        }
        return terminais.getText().toLowerCase();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Executar;
    private javax.swing.JTextField Nterminais;
    private javax.swing.JLabel aDef;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea producao;
    private javax.swing.JTextField terminais;
    // End of variables declaration//GEN-END:variables


}
